/** @file
    host, target and build configurations and settings
    Various components are purpose built for specific targets
    xtd.hpp is a descriptive configuration header that is generated by CMake from the xtd.hpp.in template.
    Various components include xtd.hpp for configuration info
    @copyright David Mott (c) 2016. Distributed under the Boost Software License Version 1.0. See LICENSE.md or http://boost.org/LICENSE_1_0.txt for details.
*/

#pragma once

#include <memory>

#define XTD_GIT_IDENT "$Id$"

#if !defined(ON)
  #define ON    1
#endif

#if !defined(OFF)
  #define OFF   0
#endif

#if !defined(YES)
  #define YES   1
#endif

#if !defined(NO)
  #define NO    0
#endif

#if !defined(DOXY_INVOKED)
  #define DOXY_INVOKED 0
#endif

/** @name XTD_CPU
RESERVED FOR FUTURE USE
@{*/
#define XTD_CPU_ARM32     1
#define XTD_CPU_ARM64     2
#define XTD_CPU_PPC32     4
#define XTD_CPU_PPC64     8
#define XTD_CPU_X32       16
#define XTD_CPU_X64       32
///@}

/** @name XTD_OS
The build/target/host OS selected by cmake configure
@{*/
#define XTD_OS_BAREMETAL  0x0
#define XTD_OS_UNIX       0x01
#define XTD_OS_WINDOWS    0x02
#define XTD_OS_IOS        (0x04 | XTD_OS_UNIX)
#define XTD_OS_ANDROID    (0x08 | XTD_OS_UNIX)
#define XTD_OS_CYGWIN     (0x10 | XTD_OS_UNIX)
#if !defined(XTD_OS)
    #define XTD_OS @XTD_OS@
#endif
///@}


/** @name XTD_COMPILER
@{*/
#define XTD_COMPILER_UNKNOWN  0x0
#define XTD_COMPILER_MSVC     0x001
#define XTD_COMPILER_GCC      0x002
#define XTD_COMPILER_CLANG    0x004
#define XTD_COMPILER_INTEL    0x008
#define XTD_COMPILER_MINGW	  (0x010 | XTD_COMPILER_GCC)
#define XTD_COMPILER_DMC      0x020
#define XTD_COMPILER_WATCOM   0x040
#define XTD_COMPILER_BORLAND  0x080
#define XTD_COMPILER_ARM      0x100
#if !defined(XTD_COMPILER)
    #define XTD_COMPILER @XTD_COMPILER@
#endif

/*
#if (XTD_COMPILER_GCC & XTD_COMPILER) && (XTD_OS_UNIX & XTD_OS)

#define fopen_s( retfile , spath, smode ) *retfile = fopen(spath, smode)

auto _dupenv_s = [](char **buffer, std::size_t *numberOfElements, const char *varname) -> int{
  auto sVal = getenv(varname);
  return 0;
};

#endif
*/
///@}


/** @name XTD_CHARSET
    The default character set used in resulting binaries
    @{*/
#define XTD_CHARSET_MBCS      1
#define XTD_CHARSET_UNICODE   2
#if !defined(XTD_CHARSET)
  #if defined(UNICODE) || defined(_UNICODE)
    #define XTD_CHARSET XTD_CHARSET_UNICODE
  #else
    #define XTD_CHARSET XTD_CHARSET_MBCS
  #endif
#endif


#if (XTD_CHARSET_UNICODE & XTD_CHARSET)
  using tchar = wchar_t;
  #define __(...) L ## __VA_ARGS__
#else
  using tchar = char;
  #define __(...)  __VA_ARGS__
#endif
    ///@}




/** @name XTD_CONFIG
    The build configuration set by cmake configure
    {@*/
#define XTD_CONFIG_DEBUG      0x1
#define XTD_CONFIG_RELEASE    0x2
#define XTD_CONFIG_MINSIZE    (0x4 | XTD_CONFIG_RELEASE)
#define XTD_CONFIG_RELDEBUG   (XTD_CONFIG_DEBUG | XTD_CONFIG_RELEASE)
#if !defined(XTD_CONFIG)
    #define XTD_CONFIG @XTD_CONFIG@
#endif

#if (XTD_CONFIG_RELEASE & XTD_CONFIG)
  #if !defined(D_)
    #define D_(...)
  #endif
  #if !defined(R_)
    #define R_(...) __VA_ARGS__
  #endif
#else
  #if !defined(D_)
    #define D_(...) __VA_ARGS__
  #endif
  #if !defined(R_)
    #define R_(...)
  #endif
#endif
    ///@}


/** @name Misc macros
    @{*/
#if !defined(NOMINMAX)
  #define NOMINMAX
#endif

#if !defined(W_)
    #define W_(x) L # x
#endif

#if !defined(QUOTE2_)
    #define QUOTE2_( x ) # x
#endif
#if !defined(QUOTE)
    #define QUOTE( x ) QUOTE2_( x )
#endif

#if !defined(CONCAT2_)
    #define CONCAT2_(x, y) x ## y
#endif
#if !defined(CONCAT)
    #define CONCAT(x, y) CONCAT2_(x,y)
#endif

#if !defined(DEFINE)
    #define DEFINE(x) x
#endif

#if defined(__COUNTER__)
  #define UNIQUE_IDENTIFIER(_prefix) CONCAT(_prefix, __COUNTER__)
#else
  #define UNIQUE_IDENTIFIER(_prefix) CONCAT(_prefix, __LINE__)
#endif

#if (XTD_COMPILER_MINGW & XTD_COMPILER)
  #define sealed
#endif

#if (XTD_COMPILER_MSVC & XTD_COMPILER)
    #if !defined(PRAGMA_)
      #define PRAGMA_(x) __pragma(x)
    #endif
    #if !defined(FORCEINLINE)
      #define FORCEINLINE __forceinline
    #endif
    #if !defined(NOVTABLE)
      #define NOVTABLE __declspec(novtable)
    #endif
    #if !defined(NORETURN)
      #define NORETURN __declspec(noreturn)
    #endif
    #if !defined(MULTIPLE)
      #define MULTIPLE __declspec(selectany)
    #endif
    #if !defined(ALIGN)
      #define ALIGN(val) __declspec(align(val))
    #endif
    #if !defined(XTD_EXPORT)
      #define XTD_EXPORT __declspec(dllexport)
    #endif
#elif ((XTD_COMPILER_CLANG | XTD_COMPILER_GCC | XTD_COMPILER_MINGW) & XTD_COMPILER)
    #if !defined(PRAGMA_)
      #define PRAGMA_(x) _Pragma( #x )
    #endif
    #if !defined(FORCEINLINE)
      #define FORCEINLINE __attribute__((always_inline))
    #endif
    #if !defined(NOVTABLE)
      #define NOVTABLE
    #endif
    #if !defined(NORETURN)
      #define NORETURN __attribute__((noreturn))
    #endif
    #if !defined(MULTIPLE)
      #define MULTIPLE __attribute__ ((weak))
    #endif
    #if !defined(ALIGN)
      #define ALIGN(val) __attribute__ ((aligned (val)))
    #endif
    #if !defined(XTD_EXPORT)
      #define XTD_EXPORT __attribute__ ((visibility ("default")))
    #endif
#endif

#if !defined(PACK_PUSH)
    #define PACK_PUSH(n) PRAGMA_(pack(push, n))
#endif
#if !defined(PACK_POP)
    #define PACK_POP() PRAGMA_(pack(pop))
#endif

#if !defined(XTD_VERBOSE_BUILD)
    #define XTD_VERBOSE_BUILD @XTD_VERBOSE_BUILD@
#endif

#if (!XTD_VERBOSE_BUILD)
    #undef TODO
    #undef NOTE
    #define TODO(...)
    #define NOTE(...)
#elif (XTD_COMPILER_MSVC & XTD_COMPILER)
  #define TODO( x ) PRAGMA_(message ( __FILE__ "(" QUOTE(__LINE__) ") : TODO : " x ))
  #define NOTE( x ) PRAGMA_(message ( __FILE__ "(" QUOTE(__LINE__) ") : NOTE : " x  ))
#elif XTD_COLOR_MESSAGES
  #define TODO( x ) PRAGMA_(message ( __FILE__ ":" QUOTE(__LINE__) " : \e[31mTODO : " x "\e[0m" ))
  #define NOTE( x ) PRAGMA_(message ( __FILE__ ":" QUOTE(__LINE__) " : \e[32mNOTE : " x  "\e[0m"))
#else
  #define TODO( x ) PRAGMA_(message ( __FILE__ ":" QUOTE(__LINE__) " : TODO : " x ))
  #define NOTE( x ) PRAGMA_(message ( __FILE__ ":" QUOTE(__LINE__) " : NOTE : " x ))
#endif
    ///@}

/// @defgroup Annotation Annotation and documentation to clarify intent of code

/*! \namespace xtd
    The main namespace of the XTL library
*/
namespace xtd{
    template <typename _ty, typename ... _arg_ts>
    constexpr std::unique_ptr<_ty> make_unique(_arg_ts&&...args) {  return std::unique_ptr<_ty>(new _ty(std::forward<_arg_ts>(args)...)); }
    /// @internal
    /// @namespace xtd::_
    /// private namespace not for external consumption
    namespace _{}
    /// @endinternal

    /** @defgroup Concurrent Concurrent algorithms library
    @{
    @namespace xtd::concurrent
    Concurrent algorithms library
    */
    namespace concurrent{}
    /// @}


    /** @defgroup Parsing Text parsing and AST generation library

    Grammars are defined using classes and macros in the xtd::parse namespace.  The fully constructed AST from the start
    rule is created and returned from xtd::parse<>::parse() if the parse succeeds.

    @{
    @namespace xtd::parse
    Grammar and AST declarations
    @example example_parse1.cpp
    @example example_parse2.cpp
    */
    namespace parse{}
    /// @}


    /** @defgroup Sockets General purpose socket communication

    @{
    @namespace xtd::socket
    General purpose socket communication
    */
    namespace socket{}
    /// @}

}

#define forever for(;;)

#if !defined(XTD_HAS_FILESYSTEM)
    #define XTD_HAS_FILESYSTEM @XTD_HAS_FILESYSTEM@
#endif

#if !defined(XTD_HAS_EXP_FILESYSTEM)
    #define XTD_HAS_EXP_FILESYSTEM @XTD_HAS_EXP_FILESYSTEM@
#endif

#if (XTD_COMPILER_MSVC == XTD_COMPILER)
	#if (1800 == _MSC_VER)
		#define _ALLOW_KEYWORD_MACROS
		#define thread_local __declspec(thread)
		#define constexpr const
		#define noexcept
	#endif
#endif