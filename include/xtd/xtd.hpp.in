/** @file
    host, target and build configurations and settings
    Various components are purpose built for specific targets
    xtd.hpp is a descriptive configuration header that is generated by CMake from the xtd.hpp.in template.
    Various components include xtd.hpp for configuration info
    @copyright David Mott (c) 2016. Distributed under the Boost Software License Version 1.0. See LICENSE.md or http://boost.org/LICENSE_1_0.txt for details.
*/

#pragma once

#define XTD_GIT_IDENT "$Id$"

#if !defined(ON)
  #define ON    1
#endif

#if !defined(OFF)
  #define OFF   0
#endif

#if !defined(YES)
  #define YES   1
#endif

#if !defined(NO)
  #define NO    0
#endif

#if !defined(TRUE)
  #define TRUE   1
#endif

#if !defined(True)
  #define True   1
#endif

#if !defined(FALSE)
  #define FALSE    0
#endif

#if !defined(False)
  #define False    0
#endif

#define XTD_VERBOSE_BUILD @XTD_VERBOSE_BUILD@;

#if !defined(DOXY_INVOKED)
  #define DOXY_INVOKED 0
#endif

#define XTD_CPU_INTEL   1
#define XTD_CPU_AMD64   (XTD_CPU_INTEL << 1)
#define XTD_CPU_x86_64  XTD_CPU_AMD64
#define XTD_CPU_ARM     (XTD_CPU_INTEL << 2)
#define XTD_CPU_aarch64 XTD_CPU_ARM

#define XTD_CPU XTD_CPU_@CMAKE_SYSTEM_PROCESSOR@

enum class target_cpus{
  intel = XTD_CPU_INTEL,
  AMD64 = XTD_CPU_AMD64,
  x86_64 = AMD64,
  arm = XTD_CPU_ARM,
  aarch64 = XTD_CPU_ARM,
};

static constexpr target_cpus target_cpu = target_cpus::@CMAKE_SYSTEM_PROCESSOR@;

#define XTD_OS_BARE_METAL 0
#define XTD_OS_UNIX       1
#define XTD_OS_Linux      XTD_OS_UNIX
#define XTD_OS_ANDROID    ((XTD_OS_UNIX << 1) | XTD_OS_UNIX)
#define XTD_OS_IOS        ((XTD_OS_UNIX << 2) | XTD_OS_UNIX)
#define XTD_OS_WINDOWS    (XTD_OS_UNIX << 3)
#define XTD_OS_Windows    XTD_OS_WINDOWS
#define XTD_OS_MINGW      ((XTD_OS_UNIX << 4) | XTD_OS_WINDOWS)
#define XTD_OS_CYGWIN     ((XTD_OS_UNIX << 5) | XTD_OS_UNIX)

enum class target_systems{
  bare_metal = XTD_OS_BARE_METAL,
  Unix = XTD_OS_UNIX,
  Linux = Unix,
  android = XTD_OS_ANDROID,
  ios = XTD_OS_IOS,
  Windows = XTD_OS_WINDOWS,
  MinGW = XTD_OS_MINGW,
  MSys2 = XTD_OS_CYGWIN,
  Cygwin = MSys2,
};

#define XTD_OS XTD_OS_@CMAKE_SYSTEM_NAME@

static constexpr target_systems target_system = target_systems::@CMAKE_SYSTEM_NAME@;


#define XTD_COMPILER_UNKNOWN 0
#define XTD_COMPILER_APPLE_CLANG 1
#define XTD_COMPILER_ARMCC  (XTD_COMPILER_APPLE_CLANG << 1)
#define XTD_COMPILER_ARMCLANG  (XTD_COMPILER_APPLE_CLANG << 2)
#define XTD_COMPILER_CLANG  (XTD_COMPILER_APPLE_CLANG << 3)
#define XTD_COMPILER_INTEL  (XTD_COMPILER_APPLE_CLANG << 4)
#define XTD_COMPILER_INTELLLVM  (XTD_COMPILER_APPLE_CLANG << 5)
#define XTD_COMPILER_MSVC  (XTD_COMPILER_APPLE_CLANG << 6)
#define XTD_COMPILER_GNU  (XTD_COMPILER_APPLE_CLANG << 7)

#define XTD_COMPILER  XTD_COMPILER_@CMAKE_CXX_COMPILER_ID@


enum class compilers{
  AppleClang=XTD_COMPILER_APPLE_CLANG,
  ARMCC=XTD_COMPILER_ARMCC,
  ARMClang=XTD_COMPILER_ARMCLANG,
  Clang=XTD_COMPILER_CLANG,
  Intel=XTD_COMPILER_INTEL,
  IntelLLVM=XTD_COMPILER_INTELLLVM,
  MSVC=XTD_COMPILER_MSVC,
  GNU=XTD_COMPILER_GNU,
};

static constexpr compilers compiler = compilers::@CMAKE_CXX_COMPILER_ID@;

static const char simulated_compiler[] { "@CMAKE_CXX_SIMULATED_ID@" };

static const char compiler_version[] { "@CMAKE_CXX_COMPILER_VERSION@" };


///@}


/** @name XTD_CHARSET
    The default character set used in resulting binaries
    @{*/
#define XTD_CHARSET_MBCS      1
#define XTD_CHARSET_UNICODE   2
#if !defined(XTD_CHARSET)
  #if defined(UNICODE) || defined(_UNICODE)
    #define XTD_CHARSET XTD_CHARSET_UNICODE
  #else
    #define XTD_CHARSET XTD_CHARSET_MBCS
  #endif
#endif


#if (XTD_CHARSET_UNICODE & XTD_CHARSET)
  using tchar = wchar_t;
  #define __(...) L ## __VA_ARGS__
#else
  using tchar = char;
  #define __(...)  __VA_ARGS__
#endif
    ///@}

#define XTD_CONFIG_DEBUG            1
#define XTD_CONFIG_Debug            XTD_CONFIG_DEBUG
#define XTD_CONFIG_RELEASE          (XTD_CONFIG_DEBUG << 1)
#define XTD_CONFIG_RELWITHDEBINFO   ((XTD_CONFIG_DEBUG << 2) | XTD_CONFIG_DEBUG | XTD_CONFIG_RELEASE)
#define XTD_CONFIG_MINSIZERELEASE   ((XTD_CONFIG_DEBUG << 3) | XTD_CONFIG_RELEASE )

#define XTD_CONFIG  XTD_CONFIG_@CMAKE_BUILD_TYPE@

enum class build_types{
  Debug,
  Release,
  MinSizeRel,
  RelWithDebInfo,
};

static constexpr build_types build_type = build_types::@CMAKE_BUILD_TYPE@;

#if (XTD_CONFIG_DEBUG & XTD_CONFIG)
  #if !defined(D_)
    #define D_(...) __VA_ARGS__
  #endif
  #if !defined(R_)
    #define R_(...)
  #endif
#else
  #if !defined(D_)
    #define D_(...)
  #endif
  #if !defined(R_)
    #define R_(...) __VA_ARGS__
  #endif
#endif
///@}


#if !defined(XTD_LOG_TARGET_SYSLOG)
    #define XTD_LOG_TARGET_SYSLOG @XTD_LOG_TARGET_SYSLOG@
#endif

#if !defined(XTD_LOG_TARGET_WINDBG)
    #define XTD_LOG_TARGET_WINDBG @XTD_LOG_TARGET_WINDBG@
#endif

#if !defined(XTD_LOG_TARGET_CSV)
    #define XTD_LOG_TARGET_CSV @XTD_LOG_TARGET_CSV@
#endif

#if !defined(XTD_LOG_TARGET_COUT)
    #define XTD_LOG_TARGET_COUT @XTD_LOG_TARGET_COUT@
#endif

#if !defined(XTD_LOG_TARGET_XML)
    #define XTD_LOG_TARGET_XML @XTD_LOG_TARGET_XML@
#endif

#if !defined(XTD_HAS_UUID)
    #define XTD_HAS_UUID @XTD_HAS_UUID@
#endif

#if !defined(XTD_COLOR_MESSAGES)
    #define XTD_COLOR_MESSAGES @XTD_COLOR_MESSAGES@
#endif

#if !defined(XTD_HAS_CODECVT)
    #define XTD_HAS_CODECVT @XTD_HAS_CODECVT@
#endif

#if !defined(XTD_HAS_EXP_CODECVT)
    #define XTD_HAS_EXP_CODECVT @XTD_HAS_EXP_CODECVT@
#endif

#if !defined(XTD_HAS_ICONV)
    #define XTD_HAS_ICONV @XTD_HAS_ICONV@
#endif

#if !defined(XTD_HAS_FILESYSTEM)
    #define XTD_HAS_FILESYSTEM @XTD_HAS_FILESYSTEM@
#endif

#if !defined(XTD_HAS_EXP_FILESYSTEM)
    #define XTD_HAS_EXP_FILESYSTEM @XTD_HAS_EXP_FILESYSTEM@
#endif

#if !defined(XTD_USE_DBGHELP)
    #define XTD_USE_DBGHELP @XTD_USE_DBGHELP@
#endif

#if (XTD_HAS_UUID)
  #include "@XTD_UUID_H@"
#endif


/** @name Misc macros
    @{*/
#if !defined(NOMINMAX)
  #define NOMINMAX
#endif

#if !defined(W_)
    #define W_(x) L # x
#endif

#if !defined(QUOTE2_)
    #define QUOTE2_( x ) # x
#endif
#if !defined(QUOTE)
    #define QUOTE( x ) QUOTE2_( x )
#endif

#if !defined(CONCAT2_)
    #define CONCAT2_(x, y) x ## y
#endif
#if !defined(CONCAT)
    #define CONCAT(x, y) CONCAT2_(x,y)
#endif

#if !defined(DEFINE)
    #define DEFINE(x) x
#endif

#if defined(__COUNTER__)
  #define UNIQUE_IDENTIFIER(_prefix) CONCAT(_prefix, __COUNTER__)
#else
  #define UNIQUE_IDENTIFIER(_prefix) CONCAT(_prefix, __LINE__)
#endif

#if (@MINGW@)
  #define sealed
#endif

#if (@MSVC@)
    #if !defined(PRAGMA_)
      #define PRAGMA_(x) __pragma(x)
    #endif
    #if !defined(FORCEINLINE)
      #define FORCEINLINE __forceinline
    #endif
    #if !defined(NOVTABLE)
      #define NOVTABLE __declspec(novtable)
    #endif
    #if !defined(NORETURN)
      #define NORETURN __declspec(noreturn)
    #endif
    #if !defined(MULTIPLE)
      #define MULTIPLE __declspec(selectany)
    #endif
    #if !defined(ALIGN)
      #define ALIGN(val) __declspec(align(val))
    #endif
    #if !defined(XTD_EXPORT)
      #define XTD_EXPORT __declspec(dllexport)
    #endif
#elif ((XTD_COMPILER_CLANG | XTD_COMPILER_GNU) & XTD_COMPILER)
    #if !defined(PRAGMA_)
      #define PRAGMA_(x) _Pragma( #x )
    #endif
    #if !defined(FORCEINLINE)
      #define FORCEINLINE __attribute__((always_inline))
    #endif
    #if !defined(NOVTABLE)
      #define NOVTABLE
    #endif
    #if !defined(NORETURN)
      #define NORETURN __attribute__((noreturn))
    #endif
    #if !defined(MULTIPLE)
      #define MULTIPLE __attribute__ ((weak))
    #endif
    #if !defined(ALIGN)
      #define ALIGN(val) __attribute__ ((aligned (val)))
    #endif
    #if !defined(XTD_EXPORT)
      #define XTD_EXPORT __attribute__ ((visibility ("default")))
    #endif
#endif

#if !defined(PACK_PUSH)
    #define PACK_PUSH(n) PRAGMA_(pack(push, n))
#endif
#if !defined(PACK_POP)
    #define PACK_POP() PRAGMA_(pack(pop))
#endif

#if !defined(XTD_VERBOSE_BUILD)
    #define XTD_VERBOSE_BUILD @CMAKE_VERBOSE_MAKEFILE@
#endif

#if (!(@CMAKE_VERBOSE_MAKEFILE@))
    #undef TODO
    #undef NOTE
    #define TODO(...)
    #define NOTE(...)
#elif (@CMAKE_COLOR_MAKEFILE@)
  #define TODO( x ) PRAGMA_(message ( __FILE__ ":" QUOTE(__LINE__) " : \e[31mTODO : " x "\e[0m" ))
  #define NOTE( x ) PRAGMA_(message ( __FILE__ ":" QUOTE(__LINE__) " : \e[32mNOTE : " x  "\e[0m"))
#else
  #define TODO( x ) PRAGMA_(message ( __FILE__ ":" QUOTE(__LINE__) " : TODO : " x ))
  #define NOTE( x ) PRAGMA_(message ( __FILE__ ":" QUOTE(__LINE__) " : NOTE : " x ))
#endif
    ///@}

/// @defgroup Annotation Annotation and documentation to clarify intent of code

/*! \namespace xtd
    The main namespace of the XTL library
*/
namespace xtd{
    /// @internal
    /// @namespace xtd::_
    /// private namespace not for external consumption
    namespace _{}
    /// @endinternal

    /** @defgroup Concurrent Concurrent algorithms library
    @{
    @namespace xtd::concurrent
    Concurrent algorithms library
    */
    namespace concurrent{}
    /// @}


    /** @defgroup Parsing Text parsing and AST generation library

    Grammars are defined using classes and macros in the xtd::parse namespace.  The fully constructed AST from the start
    rule is created and returned from xtd::parse<>::parse() if the parse succeeds.

    @{
    @namespace xtd::parse
    Grammar and AST declarations
    @example example_parse1.cpp
    @example example_parse2.cpp
    */
    namespace parse{}
    /// @}


    /** @defgroup Sockets General purpose socket communication

    @{
    @namespace xtd::socket
    General purpose socket communication
    */
    namespace socket{}
    /// @}

}

#define forever for(;;)

//System
#if (XTD_OS_UNIX & XTD_OS)
  #if !defined(_GNU_SOURCE)
    #define _GNU_SOURCE
  #endif
#endif

#if (@WIN32@ || @MINGW@)
  #if !defined(_WIN32_WINNT)
    #define _WIN32_WINNT 0x600
  #endif

  #include <winsock2.h>
  #include <windows.h>
  #include <Shlwapi.h>
  #include <Shlobj.h>
#endif



#if !defined(interface)
  #define interface struct
#endif
